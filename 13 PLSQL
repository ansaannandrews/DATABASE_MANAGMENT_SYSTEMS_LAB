SET SERVEROUTPUT ON;
SHOW SERVEROUTPUT;

DECLARE
    num INT;
    i INT;
BEGIN
    num := :num;
    i := num - 1;
    WHILE (i > 0)
    LOOP
        num := num * i;
        i := i - 1;
    END LOOP;
    dbms_output.put_line('Factorial is ' || num);
END;


DECLARE
    numa INT;
    numb INT;
    numc INT;
BEGIN
    numa := :numa;
    numb := :numb;
    numc := :numc;

    IF (numa > numb AND numa > numc) THEN
        dbms_output.put_line(numa || ' is greatest');
    ELSIF (numb > numa AND numb > numc) THEN
        dbms_output.put_line(numb || ' is greatest');
    ELSE
        dbms_output.put_line(numc || ' is greatest');
    END IF;
END;


DECLARE
    numa INT;
    numb INT;
    operatorOf INT;
    sumOf INT;
    mul INT;
    sub INT;
    div INT;
BEGIN
    numa := :numa;
    numb := :numb;
    sumOf := numa + numb;
    sub := numa - numb;
    mul := numa * numb;

    IF (numb != 0) THEN
        div := numa / numb;
    END IF;

    operatorOf := :operatorOf;

    CASE operatorOf
        WHEN 1 THEN
            dbms_output.put_line('Sum is ' || sumOf);
        WHEN 2 THEN
            dbms_output.put_line('Difference is ' || sub);
        WHEN 3 THEN
            dbms_output.put_line('Product is ' || mul);
        WHEN 4 THEN
            dbms_output.put_line('Quotient is ' || div);
        ELSE
            dbms_output.put_line('Enter correct choice');
    END CASE;
END;


DECLARE
    a INT;
    b INT;
    c INT;
    num INT;
BEGIN
    a := 0;
    b := 1;
    c := 0;
    num := :num;
    num := num - 2;

    dbms_output.put_line('The Fibonacci series is :');
    dbms_output.put_line(a);
    dbms_output.put_line(b);

    WHILE (num > 0)
    LOOP
        c := a + b;
        a := b;
        b := c;
        dbms_output.put_line(c);
        num := num - 1;
    END LOOP;
END;


DECLARE
    n INT;
    i INT;
    j INT;
    fact INT;
    sum_fact INT;
BEGIN
    n := :n;
    fact := 1;
    sum_fact := 0;

    i := 1;
    WHILE (i <= n) LOOP
        fact := fact * i;
        i := i + 1;
    END LOOP;

    dbms_output.put_line('Factorial of ' || n || ' = ' || fact);

    i := 1;
    WHILE (i <= n) LOOP
        j := 1;
        fact := 1;
        WHILE (j <= i) LOOP
            fact := fact * j;
            j := j + 1;
        END LOOP;
        sum_fact := sum_fact + fact;
        i := i + 1;
    END LOOP;

    dbms_output.put_line('Sum of factorials up to ' || n || ' = ' || sum_fact);
END;


-----Program  to find the SUMMATION OF ODD NUMBERS USING FOR LOOP
DECLARE
   n INT;
   sum8 INT;
   i INT;
BEGIN
   SUM8:=0;
   n:=:n;
   for i in 1..n loop
    if mod(i,2) = 1 then
     sum8 := i + sum8;
    end if;
   end loop;
   dbms_output.put_line('Sum = '||sum8);
   
END;
/


-----Program  to find the SUMMATION OF ODD NUMBERS USING WHILE  LOOP
DECLARE
   n INT;
   sum8 INT;
   i INT;
BEGIN
   SUM8:=0;
   n:=:n;
   i:=1;
   while(i<=n) loop
    if mod(i,2) = 1 then
     sum8 := i + sum8;
    end if;
    i:=i+1;
   end loop;
   dbms_output.put_line('Sum = '||sum8);
END;
/


-----Program to check whether a number is even or odd.
DECLARE
  n int;
BEGIN
  n:=:n;
  if mod(n,2) = 0 then
      dbms_output.put_line(n||' is even');
  else
      dbms_output.put_line(n||' is odd');
  end if;
END;


-----Program to find the sum of digits of a number.
DECLARE
   n int;
   x int;
   sum1 int;
BEGIN
   n:=:n;
   sum1:=0;
   while(n>0)
   loop
     x:=mod(n,10);
     sum1:=sum1+x;
     n:=n/10;
   end loop;
   dbms_output.put_line('Sum of digits of number = '||sum1);
END;


-----Program to reverse a number or string.
DECLARE
   str VARCHAR2(100);
   rev VARCHAR2(100) := '';
BEGIN
   str :=:str;   -- input string
 
   FOR i IN REVERSE 1 .. LENGTH(str)
   LOOP
      rev := rev || SUBSTR(str, i, 1);
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Reversed String = ' || rev);
END;


-----Program to check whether a given string is a palindrome.
DECLARE
   str VARCHAR2(100);
   rev VARCHAR2(100) := '';
   tempstr VARCHAR2(100);
BEGIN
   str :=:str;  
   tempstr:=str;
   FOR i IN REVERSE 1 .. LENGTH(str)
   LOOP
      rev := rev || SUBSTR(str, i, 1);
   END LOOP;
   if(tempstr=rev) then
     dbms_output.put_line('PALINDROME');
   else
     dbms_output.put_line('NOT PALINDROME');
   end if;
END;


-----Program to check whether a number is prime.
DECLARE
  i int;
  n int;
  flag int;
BEGIN
   i:=2;
   flag:=1;
   n:=:n;
   IF(n<=1) THEN
      DBMS_OUTPUT.PUT_LINE(n||' is NOT a prime number');
      RETURN;
   end if;
   for i IN 2..n/2
   loop
     if(mod(n,i) = 0) then
     flag:=0;
     end if;
   end loop;
   if(flag=0) then
      DBMS_OUTPUT.PUT_LINE(n||' is NOT a prime number');
   else
     DBMS_OUTPUT.PUT_LINE(n||' is a prime number');
   end if;
END;


-----Program to count the number of vowels in a string.
DECLARE
    str varchar2(100);
    i int;
    ch varchar2(1);
    vcount int;
BEGIN
  str:=:str;
  vcount:=0;
  for i IN 1..LENGTH(str)
  loop
  ch:=LOWER(SUBSTR(str,i,1));
    if(ch='a'OR ch='e' OR ch='i' OR ch='o' OR ch='u') then
      vcount:=vcount+1;
    end if;
  end loop;
   dbms_output.put_line('Number of vowels in '||str||' = '||vcount);
END;


-----Program to print multiplication tables using loops.
DECLARE
  n int;
  i int;
  m int;
BEGIN
  n:=:n;
  for i IN 1..10
  loop 
    m:=n*i;
    dbms_output.put_line(n||' * '||i||' = '||m);
  end loop;
END;


-----Program using nested loops to display patterns.
DECLARE
  i int;
  j int;
BEGIN
  for i IN 1..5
  loop
    for j IN 1..i
    loop
      dbms_output.put('*');
    end loop;
    dbms_output.new_line;
  end loop;
END;


-------exception handiling
DECLARE
  i int;
BEGIN
  i:=:i;
  i:=(i+1)/0;
  exception
  when zero_divide THEN
  dbms_output.put_line('LOGICAL ERROR');
END;
